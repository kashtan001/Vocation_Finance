#!/usr/bin/env python3
"""
HTML Beautifier - –¥–µ–ª–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω—ã —á–∏—Ç–∞–µ–º—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º LOOK_ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
+ –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º
"""
from bs4 import BeautifulSoup
import sys
import os
import glob
import re

def format_css(css_content):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ CSS –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    """
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    css_content = re.sub(r'\s+', ' ', css_content.strip())
    
    # –†–∞–∑–±–∏–≤–∞–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ –ø—Ä–∞–≤–∏–ª–∞
    formatted_css = ""
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ CSS –ø—Ä–∞–≤–∏–ª–∞ –≤–∏–¥–∞ .selector{property:value;property:value;}
    css_rules = re.findall(r'([^{}]+)\{([^{}]+)\}', css_content)
    
    for selector, properties in css_rules:
        selector = selector.strip()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
        props = [prop.strip() for prop in properties.split(';') if prop.strip()]
        
        if len(props) <= 3:
            # –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            formatted_css += f"{selector} {{ {'; '.join(props)}; }}\n"
        else:
            # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            formatted_css += f"{selector} {{\n"
            for prop in props:
                formatted_css += f"    {prop};\n"
            formatted_css += "}\n"
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    if not css_rules:
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π –∏ –¥–µ–ª–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        parts = css_content.split(';')
        formatted_css = ""
        indent = 0
        
        for part in parts:
            part = part.strip()
            if not part:
                continue
                
            if '{' in part:
                formatted_css += "    " * indent + part + "\n"
                indent += 1
            elif '}' in part:
                indent = max(0, indent - 1)
                formatted_css += "    " * indent + part + "\n"
            else:
                formatted_css += "    " * indent + part + ";\n"
    
    return formatted_css

def beautify_html(input_file):
    """–î–µ–ª–∞–µ—Ç HTML —á–∏—Ç–∞–µ–º—ã–º —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º CSS"""
    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {input_file}")
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            html = f.read()
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html, 'html.parser')
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ <style> —Ç–µ–≥–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º CSS
        style_tags = soup.find_all('style')
        css_formatted_count = 0
        
        for style_tag in style_tags:
            if style_tag.string:
                original_css = style_tag.string
                formatted_css = format_css(original_css)
                style_tag.string = "\n" + formatted_css + "    "  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
                css_formatted_count += 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        pretty_html = soup.prettify()
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º LOOK_
        base_name = os.path.basename(input_file)
        output_file = f"LOOK_{base_name}"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(pretty_html)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —á–∏—Ç–∞–µ–º—ã–π —Ñ–∞–π–ª: {output_file}")
        if css_formatted_count > 0:
            print(f"üé® –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ CSS –±–ª–æ–∫–æ–≤: {css_formatted_count}")
        return output_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {input_file}: {e}")
        return None

def main():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ HTML —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    html_files = glob.glob("*.html")
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º LOOK_
    html_files = [f for f in html_files if not f.startswith("LOOK_")]
    
    if not html_files:
        print("‚ùå HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: {len(html_files)}")
    print(f"üìã –§–∞–π–ª—ã: {', '.join(html_files)}")
    print()
    
    processed = 0
    for html_file in html_files:
        result = beautify_html(html_file)
        if result:
            processed += 1
    
    print()
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed}/{len(html_files)}")
    print("üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å LOOK_*.html —Ñ–∞–π–ª—ã")
    print("üí° CSS —Å—Ç–∏–ª–∏ —Ç–µ–ø–µ—Ä—å –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º!")

if __name__ == '__main__':
    main()
